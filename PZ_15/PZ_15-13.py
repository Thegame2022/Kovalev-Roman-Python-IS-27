import sqlite3

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect('sklad.db')
c = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
c.execute('''CREATE TABLE IF NOT EXISTS tovari (
             kod INTEGER PRIMARY KEY, 
             marka TEXT, 
             tip TEXT, 
             cena REAL, 
             kolvo INTEGER, 
             min_zapas INTEGER)''')
conn.commit()


def dobavit():
    print("\n[–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä]")
    kod = int(input("–ö–æ–¥: "))
    marka = input("–ú–∞—Ä–∫–∞: ")
    tip = input("–¢–∏–ø: ")
    cena = float(input("–¶–µ–Ω–∞: "))
    kolvo = int(input("–ö–æ–ª-–≤–æ: "))
    min_zapas = int(input("–ú–∏–Ω.–∑–∞–ø–∞—Å: "))

    c.execute("INSERT INTO tovari VALUES (?,?,?,?,?,?)",
              (kod, marka, tip, cena, kolvo, min_zapas))
    conn.commit()
    print("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")


def poisk():
    print("\n[–ü–æ–∏—Å–∫]")
    m = input("–ú–∞—Ä–∫–∞ (Enter - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ")
    t = input("–¢–∏–ø (Enter - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ")

    query = "SELECT * FROM tovari WHERE 1=1"
    params = []

    if m:
        query += " AND marka LIKE ?"
        params.append(f'%{m}%')
    if t:
        query += " AND tip LIKE ?"
        params.append(f'%{t}%')

    c.execute(query, params)
    result = c.fetchall()

    if not result:
        print("üò¢ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("\n–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
        for row in result:
            print(f"{row[0]}. {row[1]} ({row[2]}), {row[4]} —à—Ç. –ø–æ {row[3]} —Ä—É–±.")


def udalit():
    print("\n[–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä]")
    kod = int(input("–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: "))

    c.execute("DELETE FROM tovari WHERE kod=?", (kod,))
    conn.commit()

    if c.rowcount > 0:
        print("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
    else:
        print("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")


def redakt():
    print("\n[–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä]")
    kod = int(input("–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: "))

    c.execute("SELECT * FROM tovari WHERE kod=?", (kod,))
    tovar = c.fetchone()

    if not tovar:
        print("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print(f"\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"1. –ú–∞—Ä–∫–∞: {tovar[1]}")
    print(f"2. –¢–∏–ø: {tovar[2]}")
    print(f"3. –¶–µ–Ω–∞: {tovar[3]}")
    print(f"4. –ö–æ–ª-–≤–æ: {tovar[4]}")
    print(f"5. –ú–∏–Ω.–∑–∞–ø–∞—Å: {tovar[5]}")

    pole = int(input("\n–ß—Ç–æ –º–µ–Ω—è–µ–º? (1-5): "))
    novoe = input("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ")

    if pole == 1:
        c.execute("UPDATE tovari SET marka=? WHERE kod=?", (novoe, kod))
    elif pole == 2:
        c.execute("UPDATE tovari SET tip=? WHERE kod=?", (novoe, kod))
    elif pole == 3:
        c.execute("UPDATE tovari SET cena=? WHERE kod=?", (float(novoe), kod))
    elif pole == 4:
        c.execute("UPDATE tovari SET kolvo=? WHERE kod=?", (int(novoe), kod))
    elif pole == 5:
        c.execute("UPDATE tovari SET min_zapas=? WHERE kod=?", (int(novoe), kod))
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")
        return

    conn.commit()
    print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


def spisok():
    print("\n[–í–µ—Å—å —Å–∫–ª–∞–¥]")
    c.execute("SELECT * FROM tovari")
    all_tov = c.fetchall()

    if not all_tov:
        print("üò¢ –°–∫–ª–∞–¥ –ø—É—Å—Ç")
        return

    for t in all_tov:
        status = "‚ö†Ô∏è –ú–ê–õ–û!" if t[4] < t[5] else "‚úÖ"
        print(f"{t[0]}. {t[1]} ({t[2]}): {t[4]} —à—Ç. –ø–æ {t[3]} —Ä—É–±. {status}")


def test_dannie():
    test = [
        (1, 'Samsung', '–¢–µ–ª–µ—Ñ–æ–Ω', 500.0, 10, 5),
        (2, 'Apple', '–ü–ª–∞–Ω—à–µ—Ç', 700.0, 3, 4),
        (3, 'Xiaomi', '–ù–∞—É—à–Ω–∏–∫–∏', 50.0, 20, 15),
        (4, 'Bosch', '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', 899.99, 15, 3),
        (5, 'LG', '–¢–µ–ª–µ–≤–∏–∑–æ—Ä', 799.99, 25, 5),
        (6, 'Philips', '–ö–æ—Ñ–µ–≤–∞—Ä–∫–∞', 129.99, 40, 8),
        (7, 'Sony', '–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å', 499.99, 18, 4),
        (8, 'Canon', '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç', 699.99, 22, 6),
        (9, 'Dyson', '–ü—ã–ª–µ—Å–æ—Å', 399.99, 35, 7),
        (10, 'Braun', '–ë–ª–µ–Ω–¥–µ—Ä', 89.99, 60, 12)
    ]

    c.executemany("INSERT OR IGNORE INTO tovari VALUES (?,?,?,?,?,?)", test)
    conn.commit()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
while True:
    print("\n" + "=" * 30)
    print("  –£–ß–ï–¢ –¢–û–í–ê–†–û–í –ù–ê –°–ö–õ–ê–î–ï")
    print("=" * 30)
    print("1. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    print("2. –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä")
    print("3. –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    print("4. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
    print("5. –í–µ—Å—å —Å–∫–ª–∞–¥")
    print("6. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("0. –í—ã—Ö–æ–¥")
    print("-" * 30)

    v = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

    if v == '1':
        dobavit()
    elif v == '2':
        poisk()
    elif v == '3':
        udalit()
    elif v == '4':
        redakt()
    elif v == '5':
        spisok()
    elif v == '6':
        test_dannie()
    elif v == '0':
        print("–í—ã—Ö–æ–¥...")
        break
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

conn.close()